{"ast":null,"code":"import axios from \"axios\";\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8080/'\n});\nexport const LoginCall = (email, password) => apiClient.post(`/login`, JSON.stringify({\n  email: email,\n  password: password\n}));\n_c = LoginCall;\nexport const LogoutCall = () => apiClient.get(`/logout`);\n\n// export const RegisterLibraryCall=(name,email,contact,password,libname)=> apiClient.post(`Register/Library`,JSON.stringify({\n// name:name,\n// email:email,\n// contact_number:Number(contact),\n// password:password,\n// lib_name:libname\n// }))\n// export const SignupReaderCall=(name,email,contact,password,lib)=> apiClient.post(`signup/${lib}`,JSON.stringify({\n//   name:name,\n//   email:email,\n//   contact_number:Number(contact),\n//   password:password\n\n//   }))\n// export const GetLibraryCall=()=> apiClient.get(`/library`)\n\n// export const GetUserCall =(Role)=>apiClient.get(`/${Role}/user`);\n// export const RemoveAdminCall =(Role)=>apiClient.delete(`/${Role}/admin`);\n\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem('Token'); // Assuming you store the token in localStorage\n//     if (token) {\n//       config.headers.Authorization = `${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const AddAdminCall=(name,email,contact,password,role)=> apiClient.post(`/${role}/admin`,JSON.stringify({\n//   name:name,\n//   email:email,\n//   contact_number:Number(contact),\n//   password:password\n//   }))\n\n//   export const AddBookCall=(isbn,title,authors,publisher,version,total,role)=> apiClient.post(`/${role}/book`,JSON.stringify({\n//     isbn:Number(isbn),\n//     Title:title,\n//     Authors:authors,\n//     Publisher:publisher,\n//     Version:version,\n//     TotalCopies:Number(total)\n//     }))\n\n//   export const GetBookCall =(Role)=>apiClient.get(`/${Role}/book`);\n//   export const GetBookByIdCall =(Role,id)=>apiClient.get(`/${Role}/book/${id}`);\n_c2 = LogoutCall;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginCall\");\n$RefreshReg$(_c2, \"LogoutCall\");","map":{"version":3,"names":["axios","apiClient","create","baseURL","LoginCall","email","password","post","JSON","stringify","_c","LogoutCall","get","_c2","$RefreshReg$"],"sources":["/home/xs436-anikum/Desktop/libsis/frontend/src/hooks/apicall.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst apiClient=axios.create(\n  {\n      baseURL:'http://localhost:8080/'\n  }\n)\nexport const LoginCall=(email,password)=> apiClient.post(`/login`,JSON.stringify({\n  email: email,\n  password: password}),\n)\nexport const LogoutCall=()=> apiClient.get(`/logout`)\n\n\n\n\n\n\n\n\n// export const RegisterLibraryCall=(name,email,contact,password,libname)=> apiClient.post(`Register/Library`,JSON.stringify({\n// name:name,\n// email:email,\n// contact_number:Number(contact),\n// password:password,\n// lib_name:libname\n// }))\n// export const SignupReaderCall=(name,email,contact,password,lib)=> apiClient.post(`signup/${lib}`,JSON.stringify({\n//   name:name,\n//   email:email,\n//   contact_number:Number(contact),\n//   password:password\n\n//   }))\n// export const GetLibraryCall=()=> apiClient.get(`/library`)\n\n// export const GetUserCall =(Role)=>apiClient.get(`/${Role}/user`);\n// export const RemoveAdminCall =(Role)=>apiClient.delete(`/${Role}/admin`);\n\n\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem('Token'); // Assuming you store the token in localStorage\n//     if (token) {\n//       config.headers.Authorization = `${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const AddAdminCall=(name,email,contact,password,role)=> apiClient.post(`/${role}/admin`,JSON.stringify({\n//   name:name,\n//   email:email,\n//   contact_number:Number(contact),\n//   password:password\n//   }))\n\n \n//   export const AddBookCall=(isbn,title,authors,publisher,version,total,role)=> apiClient.post(`/${role}/book`,JSON.stringify({\n//     isbn:Number(isbn),\n//     Title:title,\n//     Authors:authors,\n//     Publisher:publisher,\n//     Version:version,\n//     TotalCopies:Number(total)\n//     }))\n    \n  \n//   export const GetBookCall =(Role)=>apiClient.get(`/${Role}/book`);\n//   export const GetBookByIdCall =(Role,id)=>apiClient.get(`/${Role}/book/${id}`);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAACD,KAAK,CAACE,MAAM,CAC1B;EACIC,OAAO,EAAC;AACZ,CACF,CAAC;AACD,OAAO,MAAMC,SAAS,GAACA,CAACC,KAAK,EAACC,QAAQ,KAAIL,SAAS,CAACM,IAAI,CAAE,QAAO,EAACC,IAAI,CAACC,SAAS,CAAC;EAC/EJ,KAAK,EAAEA,KAAK;EACZC,QAAQ,EAAEA;AAAQ,CAAC,CACrB,CAAC;AAAAI,EAAA,GAHYN,SAAS;AAItB,OAAO,MAAMO,UAAU,GAACA,CAAA,KAAKV,SAAS,CAACW,GAAG,CAAE,SAAQ,CAAC;;AASrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAAAC,GAAA,GA7DaF,UAAU;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}